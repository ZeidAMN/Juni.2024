@page "/counter"
@using System.IO
@using System.Text
@using Microsoft.JSInterop

<PageTitle>Counter</PageTitle>

<div class="counter-page">
    <h1>Counter</h1>

    <p role="status">Current count: @currentCount</p>

    <button class="btn btn-primary" @onclick="IncrementCount">Click me plus</button>
    <button class="btn btn-primary" @onclick="DecrementCount">Click me minus</button>

    <input @bind="newItem" placeholder="Enter something" />
    <button class="btn btn-primary" @onclick="addItem">Add</button>

    @if (!string.IsNullOrEmpty(downloadLink))
    {
        <a href="@downloadLink" download="data.txt">Download File</a>
    }

    <ul>
        @foreach (var item in items)
        {
            <li>@item</li>
        }
    </ul>
</div>

@code {
    private int currentCount = 0;
    private string newItem = string.Empty;
    private List<string> items = new List<string>();
    private string downloadLink = string.Empty;

    // Increment count
    private void IncrementCount()
    {
        currentCount++;
        CheckCount();
    }

    // Decrement count
    private void DecrementCount()
    {
        currentCount--;
        CheckCount();
    }

    // Add item to list
    private void addItem()
    {
        if (!string.IsNullOrWhiteSpace(newItem))
        {
            items.Add(newItem);
            newItem = string.Empty;
            saveToFile(); // Call saveToFile() when adding an item
        }
    }

    // Check count for showing video
    private void CheckCount()
    {
        if (currentCount >= 20 || currentCount <= -20)
        {
            ShowVideo();
        }
    }

    // Show video method
    private void ShowVideo()
    {
        JS.InvokeVoidAsync("open", "https://tenor.com/de/view/rick-astley-dance-never-gonna-give-you-up-rickroll-wtg-gif-19135815", "_blank");
    }

    // Inject IJSRuntime for JavaScript interop
    [Inject]
    private IJSRuntime JS { get; set; }

    // Save text to file method
    private async Task saveToFile()
    {
        try
        {
            // Create a memory stream to write the file content
            using (MemoryStream ms = new MemoryStream())
            {
                using (StreamWriter writer = new StreamWriter(ms, Encoding.UTF8))
                {
                    foreach (var item in items)
                    {
                        await writer.WriteLineAsync(item);
                    }
                    await writer.FlushAsync();
                    ms.Seek(0, SeekOrigin.Begin);

                    // Convert the memory stream to a base64 string
                    var bytes = ms.ToArray();
                    var base64 = Convert.ToBase64String(bytes);

                    // Create a data URL link
                    downloadLink = $"data:text/plain;base64,{base64}";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving file: {ex.Message}");
        }
    }
}
